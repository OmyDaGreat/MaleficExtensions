[{"name":"constructor(value: T, children: List<TreeNode<T>> = emptyList())","description":"xyz.malefic.ext.tree.TreeNode.TreeNode","location":"core/xyz.malefic.ext.tree/-tree-node/-tree-node.html","searchKeys":["TreeNode","constructor(value: T, children: List<TreeNode<T>> = emptyList())","xyz.malefic.ext.tree.TreeNode.TreeNode"]},{"name":"data class TreeNode<T>(val value: T, val children: List<TreeNode<T>> = emptyList())","description":"xyz.malefic.ext.tree.TreeNode","location":"core/xyz.malefic.ext.tree/-tree-node/index.html","searchKeys":["TreeNode","data class TreeNode<T>(val value: T, val children: List<TreeNode<T>> = emptyList())","xyz.malefic.ext.tree.TreeNode"]},{"name":"fun <T> T?.resolveNull(ifNotNull: T, ifNull: T): T","description":"xyz.malefic.ext.any.resolveNull","location":"core/xyz.malefic.ext.any/resolve-null.html","searchKeys":["resolveNull","fun <T> T?.resolveNull(ifNotNull: T, ifNull: T): T","xyz.malefic.ext.any.resolveNull"]},{"name":"fun <T> createSingleNode(value: T): TreeNode<T>","description":"xyz.malefic.ext.tree.TreeNode.Companion.createSingleNode","location":"core/xyz.malefic.ext.tree/-tree-node/-companion/create-single-node.html","searchKeys":["createSingleNode","fun <T> createSingleNode(value: T): TreeNode<T>","xyz.malefic.ext.tree.TreeNode.Companion.createSingleNode"]},{"name":"fun Any.grass(string: String): InputStream?","description":"xyz.malefic.ext.stream.grass","location":"core/xyz.malefic.ext.stream/grass.html","searchKeys":["grass","fun Any.grass(string: String): InputStream?","xyz.malefic.ext.stream.grass"]},{"name":"fun File.buildFileTree(): TreeNode<File>","description":"xyz.malefic.ext.file.buildFileTree","location":"core/xyz.malefic.ext.file/build-file-tree.html","searchKeys":["buildFileTree","fun File.buildFileTree(): TreeNode<File>","xyz.malefic.ext.file.buildFileTree"]},{"name":"fun File.loadFileContent(onContentLoaded: (String) -> Unit): Job","description":"xyz.malefic.ext.file.loadFileContent","location":"core/xyz.malefic.ext.file/load-file-content.html","searchKeys":["loadFileContent","fun File.loadFileContent(onContentLoaded: (String) -> Unit): Job","xyz.malefic.ext.file.loadFileContent"]},{"name":"fun File.saveFile(content: String): Job","description":"xyz.malefic.ext.file.saveFile","location":"core/xyz.malefic.ext.file/save-file.html","searchKeys":["saveFile","fun File.saveFile(content: String): Job","xyz.malefic.ext.file.saveFile"]},{"name":"fun Int.factorial(): Int","description":"xyz.malefic.ext.num.factorial","location":"core/xyz.malefic.ext.num/factorial.html","searchKeys":["factorial","fun Int.factorial(): Int","xyz.malefic.ext.num.factorial"]},{"name":"fun Int.generateFibonacci(): List<Int>","description":"xyz.malefic.ext.num.generateFibonacci","location":"core/xyz.malefic.ext.num/generate-fibonacci.html","searchKeys":["generateFibonacci","fun Int.generateFibonacci(): List<Int>","xyz.malefic.ext.num.generateFibonacci"]},{"name":"fun Int.isPrime(): Boolean","description":"xyz.malefic.ext.num.isPrime","location":"core/xyz.malefic.ext.num/is-prime.html","searchKeys":["isPrime","fun Int.isPrime(): Boolean","xyz.malefic.ext.num.isPrime"]},{"name":"fun Int.trinum(): Int","description":"xyz.malefic.ext.num.trinum","location":"core/xyz.malefic.ext.num/trinum.html","searchKeys":["trinum","fun Int.trinum(): Int","xyz.malefic.ext.num.trinum"]},{"name":"fun String.capitalizeFirstLetter(): String","description":"xyz.malefic.ext.string.capitalizeFirstLetter","location":"core/xyz.malefic.ext.string/capitalize-first-letter.html","searchKeys":["capitalizeFirstLetter","fun String.capitalizeFirstLetter(): String","xyz.malefic.ext.string.capitalizeFirstLetter"]},{"name":"fun String.containsAny(vararg substrings: String): Boolean","description":"xyz.malefic.ext.string.containsAny","location":"core/xyz.malefic.ext.string/contains-any.html","searchKeys":["containsAny","fun String.containsAny(vararg substrings: String): Boolean","xyz.malefic.ext.string.containsAny"]},{"name":"fun String.either(first: String, second: String): String","description":"xyz.malefic.ext.string.either","location":"core/xyz.malefic.ext.string/either.html","searchKeys":["either","fun String.either(first: String, second: String): String","xyz.malefic.ext.string.either"]},{"name":"fun String.fromHex(): String","description":"xyz.malefic.ext.string.fromHex","location":"core/xyz.malefic.ext.string/from-hex.html","searchKeys":["fromHex","fun String.fromHex(): String","xyz.malefic.ext.string.fromHex"]},{"name":"fun String.isEmail(): Boolean","description":"xyz.malefic.ext.string.isEmail","location":"core/xyz.malefic.ext.string/is-email.html","searchKeys":["isEmail","fun String.isEmail(): Boolean","xyz.malefic.ext.string.isEmail"]},{"name":"fun String.isNumeric(): Boolean","description":"xyz.malefic.ext.string.isNumeric","location":"core/xyz.malefic.ext.string/is-numeric.html","searchKeys":["isNumeric","fun String.isNumeric(): Boolean","xyz.malefic.ext.string.isNumeric"]},{"name":"fun String.titlecase(): String","description":"xyz.malefic.ext.string.titlecase","location":"core/xyz.malefic.ext.string/titlecase.html","searchKeys":["titlecase","fun String.titlecase(): String","xyz.malefic.ext.string.titlecase"]},{"name":"fun String.toCamelCase(): String","description":"xyz.malefic.ext.string.toCamelCase","location":"core/xyz.malefic.ext.string/to-camel-case.html","searchKeys":["toCamelCase","fun String.toCamelCase(): String","xyz.malefic.ext.string.toCamelCase"]},{"name":"fun String.toHex(): String","description":"xyz.malefic.ext.string.toHex","location":"core/xyz.malefic.ext.string/to-hex.html","searchKeys":["toHex","fun String.toHex(): String","xyz.malefic.ext.string.toHex"]},{"name":"fun filter(predicate: (T) -> Boolean): TreeNode<T>?","description":"xyz.malefic.ext.tree.TreeNode.filter","location":"core/xyz.malefic.ext.tree/-tree-node/filter.html","searchKeys":["filter","fun filter(predicate: (T) -> Boolean): TreeNode<T>?","xyz.malefic.ext.tree.TreeNode.filter"]},{"name":"fun flattenTree(depth: Int = 0): Sequence<Pair<T, Int>>","description":"xyz.malefic.ext.tree.TreeNode.flattenTree","location":"core/xyz.malefic.ext.tree/-tree-node/flatten-tree.html","searchKeys":["flattenTree","fun flattenTree(depth: Int = 0): Sequence<Pair<T, Int>>","xyz.malefic.ext.tree.TreeNode.flattenTree"]},{"name":"fun gcd(a: Int, b: Int): Int","description":"xyz.malefic.ext.num.gcd","location":"core/xyz.malefic.ext.num/gcd.html","searchKeys":["gcd","fun gcd(a: Int, b: Int): Int","xyz.malefic.ext.num.gcd"]},{"name":"infix fun <T : Comparable<T>> T.max(other: T): T","description":"xyz.malefic.ext.num.max","location":"core/xyz.malefic.ext.num/max.html","searchKeys":["max","infix fun <T : Comparable<T>> T.max(other: T): T","xyz.malefic.ext.num.max"]},{"name":"infix fun <T : Comparable<T>> T.min(other: T): T","description":"xyz.malefic.ext.num.min","location":"core/xyz.malefic.ext.num/min.html","searchKeys":["min","infix fun <T : Comparable<T>> T.min(other: T): T","xyz.malefic.ext.num.min"]},{"name":"infix fun <T : Number> T.pow(exponent: Int): Double","description":"xyz.malefic.ext.num.pow","location":"core/xyz.malefic.ext.num/pow.html","searchKeys":["pow","infix fun <T : Number> T.pow(exponent: Int): Double","xyz.malefic.ext.num.pow"]},{"name":"infix fun Boolean.runF(f: () -> Unit): Boolean","description":"xyz.malefic.ext.bool.runF","location":"core/xyz.malefic.ext.bool/run-f.html","searchKeys":["runF","infix fun Boolean.runF(f: () -> Unit): Boolean","xyz.malefic.ext.bool.runF"]},{"name":"infix fun Boolean.runT(t: () -> Unit): Boolean","description":"xyz.malefic.ext.bool.runT","location":"core/xyz.malefic.ext.bool/run-t.html","searchKeys":["runT","infix fun Boolean.runT(t: () -> Unit): Boolean","xyz.malefic.ext.bool.runT"]},{"name":"infix fun Int.gcd(other: Int): Int","description":"xyz.malefic.ext.num.gcd","location":"core/xyz.malefic.ext.num/gcd.html","searchKeys":["gcd","infix fun Int.gcd(other: Int): Int","xyz.malefic.ext.num.gcd"]},{"name":"infix fun Int.isDivisibleBy(other: Int): Boolean","description":"xyz.malefic.ext.num.isDivisibleBy","location":"core/xyz.malefic.ext.num/is-divisible-by.html","searchKeys":["isDivisibleBy","infix fun Int.isDivisibleBy(other: Int): Boolean","xyz.malefic.ext.num.isDivisibleBy"]},{"name":"infix fun Int.lcm(other: Int): Int","description":"xyz.malefic.ext.num.lcm","location":"core/xyz.malefic.ext.num/lcm.html","searchKeys":["lcm","infix fun Int.lcm(other: Int): Int","xyz.malefic.ext.num.lcm"]},{"name":"inline operator fun <T> List<T?>.get(index: Int, default: T): T","description":"xyz.malefic.ext.list.get","location":"core/xyz.malefic.ext.list/get.html","searchKeys":["get","inline operator fun <T> List<T?>.get(index: Int, default: T): T","xyz.malefic.ext.list.get"]},{"name":"object Companion","description":"xyz.malefic.ext.tree.TreeNode.Companion","location":"core/xyz.malefic.ext.tree/-tree-node/-companion/index.html","searchKeys":["Companion","object Companion","xyz.malefic.ext.tree.TreeNode.Companion"]},{"name":"open override fun toString(): String","description":"xyz.malefic.ext.tree.TreeNode.toString","location":"core/xyz.malefic.ext.tree/-tree-node/to-string.html","searchKeys":["toString","open override fun toString(): String","xyz.malefic.ext.tree.TreeNode.toString"]},{"name":"operator fun Int.not(): Int","description":"xyz.malefic.ext.num.not","location":"core/xyz.malefic.ext.num/not.html","searchKeys":["not","operator fun Int.not(): Int","xyz.malefic.ext.num.not"]},{"name":"val Int.!: Int","description":"xyz.malefic.ext.num.!","location":"core/xyz.malefic.ext.num/!.html","searchKeys":["!","val Int.!: Int","xyz.malefic.ext.num.!"]},{"name":"val children: List<TreeNode<T>>","description":"xyz.malefic.ext.tree.TreeNode.children","location":"core/xyz.malefic.ext.tree/-tree-node/children.html","searchKeys":["children","val children: List<TreeNode<T>>","xyz.malefic.ext.tree.TreeNode.children"]},{"name":"val value: T","description":"xyz.malefic.ext.tree.TreeNode.value","location":"core/xyz.malefic.ext.tree/-tree-node/value.html","searchKeys":["value","val value: T","xyz.malefic.ext.tree.TreeNode.value"]},{"name":"fun Modifier.animateVisibility(isVisible: Boolean): Modifier","description":"xyz.malefic.ext.compose.animateVisibility","location":"compose/xyz.malefic.ext.compose/animate-visibility.html","searchKeys":["animateVisibility","fun Modifier.animateVisibility(isVisible: Boolean): Modifier","xyz.malefic.ext.compose.animateVisibility"]},{"name":"fun Modifier.clickableIf(condition: Boolean, enabled: Boolean = true, onClickLabel: String? = null, role: Role? = null, onClick: () -> Unit): Modifier","description":"xyz.malefic.ext.compose.clickableIf","location":"compose/xyz.malefic.ext.compose/clickable-if.html","searchKeys":["clickableIf","fun Modifier.clickableIf(condition: Boolean, enabled: Boolean = true, onClickLabel: String? = null, role: Role? = null, onClick: () -> Unit): Modifier","xyz.malefic.ext.compose.clickableIf"]},{"name":"fun Modifier.modifyIf(condition: Boolean, modifier: Modifier): Modifier","description":"xyz.malefic.ext.compose.modifyIf","location":"compose/xyz.malefic.ext.compose/modify-if.html","searchKeys":["modifyIf","fun Modifier.modifyIf(condition: Boolean, modifier: Modifier): Modifier","xyz.malefic.ext.compose.modifyIf"]},{"name":"fun Modifier.modifyIfElse(condition: Boolean, modifier: Modifier, alternateModifier: Modifier): Modifier","description":"xyz.malefic.ext.compose.modifyIfElse","location":"compose/xyz.malefic.ext.compose/modify-if-else.html","searchKeys":["modifyIfElse","fun Modifier.modifyIfElse(condition: Boolean, modifier: Modifier, alternateModifier: Modifier): Modifier","xyz.malefic.ext.compose.modifyIfElse"]},{"name":"fun Modifier.roundedBackgroundWithPadding(backgroundColor: Color, cornerRadius: Dp, padding: Dp): Modifier","description":"xyz.malefic.ext.compose.roundedBackgroundWithPadding","location":"compose/xyz.malefic.ext.compose/rounded-background-with-padding.html","searchKeys":["roundedBackgroundWithPadding","fun Modifier.roundedBackgroundWithPadding(backgroundColor: Color, cornerRadius: Dp, padding: Dp): Modifier","xyz.malefic.ext.compose.roundedBackgroundWithPadding"]},{"name":"fun Modifier.showIf(condition: Boolean): Modifier","description":"xyz.malefic.ext.compose.showIf","location":"compose/xyz.malefic.ext.compose/show-if.html","searchKeys":["showIf","fun Modifier.showIf(condition: Boolean): Modifier","xyz.malefic.ext.compose.showIf"]},{"name":"infix fun Navigator.gate(route: String)","description":"xyz.malefic.ext.precompose.gate","location":"compose/xyz.malefic.ext.precompose/gate.html","searchKeys":["gate","infix fun Navigator.gate(route: String)","xyz.malefic.ext.precompose.gate"]},{"name":"infix suspend fun LazyListState.scroll(index: Int)","description":"xyz.malefic.ext.compose.scroll","location":"compose/xyz.malefic.ext.compose/scroll.html","searchKeys":["scroll","infix suspend fun LazyListState.scroll(index: Int)","xyz.malefic.ext.compose.scroll"]},{"name":"suspend fun LazyListState.scrollToTop()","description":"xyz.malefic.ext.compose.scrollToTop","location":"compose/xyz.malefic.ext.compose/scroll-to-top.html","searchKeys":["scrollToTop","suspend fun LazyListState.scrollToTop()","xyz.malefic.ext.compose.scrollToTop"]}]